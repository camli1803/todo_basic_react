import './App.css';
import {useReducer, useRef } from "react"

const initialState = {
  job: "",
  jobs: []
}

const SET_JOB = "set_todo"
const ADD_JOB = "add_todo"
const DELETE_JOB = "delete_todo"

const reducer = (state, action) => {
  switch(action.type) {
    case SET_JOB:
      return {
        ...state,
        job: action.payload
      }
    case ADD_JOB:
      return {
        ...state,
        jobs: [...state.jobs, action.payload]
      }
    case DELETE_JOB:
      console.log(action.payload)
      const newJobs = [...state.jobs]
      newJobs.splice(action.payload, 1)
      return {
        ...state,
        jobs: newJobs
      } 
    default:
      throw new Error("Invalid action...")  
  }
}

function App() {
  const [state, dispatch] = useReducer(reducer, initialState)
  
  const {job, jobs} = state

  const inputElem = useRef()

  const handleSubmit = () => {
    dispatch({type: ADD_JOB, payload: job})
    dispatch({type: SET_JOB, payload: ""})
    inputElem.current.focus()

  } 
  return (
    <div className='App'>
      <h1>TodoList</h1>
      <div className="input-block">
        <input ref={inputElem} type='text' value= {job} placeholder='Nhập task mới ...' onChange={(e) => dispatch({type: SET_JOB, payload: e.target.value})}/>
        <button type='button' onClick={()=> handleSubmit()}>Thêm</button>
      </div>
      <div className="todolist-content">
        <ol>
          {jobs.map((job, index) => (
            <li key={index}>
              <strong>{job}</strong>
              <i className='fa-solid fa-circle-xmark' onClick={()=> dispatch({type: DELETE_JOB, payload: index})}></i>
            </li>
          ))}
        </ol>
      </div>
    </div>
  )
}

export default App;